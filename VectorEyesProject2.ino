// =================================================================
// C√ÅC TH∆Ø VI·ªÜN V√Ä KHAI B√ÅO
// =================================================================

// Th∆∞ vi·ªán cho c√°c ch·ª©c nƒÉng c·ªët l√µi
#include "engine/AnimationEngine.h"
#include "directors/Directors.h"
#include <U8g2lib.h>

// Th∆∞ vi·ªán cho ƒëa nhi·ªám v√† WiFi
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <WiFi.h>
#include <WiFiMulti.h>
#include <HTTPClient.h>
#include <ESPmDNS.h>
#include "secrets.h"

// Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng m√†n h√¨nh OLED
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

// Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng WiFiMulti
WiFiMulti wifiMulti;

// Bi·∫øn global ƒë·ªÉ l∆∞u th√¥ng tin server t√¨m ƒë∆∞·ª£c qua mDNS
String discovered_server_ip = "";
int discovered_server_port = 0;
bool server_discovered = false;

// =================================================================
// H√ÄM HELPER ƒê·ªÇ T√åM EMOTION THEO T√äN
// =================================================================
const Emotion* find_emotion_by_name(const char* emotion_name) {
    for (int i = 0; i < EMOTION_COUNT; i++) {
        if (strcmp(emotions[i].name, emotion_name) == 0) {
            return &emotions[i];
        }
    }
    return nullptr; // Kh√¥ng t√¨m th·∫•y
}


// =================================================================
// TASK CHO CORE 0: X·ª¨ L√ù M·∫†NG V√Ä LOGIC "N√ÉO"
// =================================================================
void networkAndBrainTask(void *pvParameters) {
  Serial.println("Task M·∫°ng & N√£o b·ªô ƒë√£ b·∫Øt ƒë·∫ßu tr√™n Core 0.");

  // --- B∆∞·ªõc 1: K·∫øt n·ªëi WiFi ---
  int num_known_wifis = sizeof(known_wifis) / sizeof(known_wifis[0]);
  for (int i = 0; i < num_known_wifis; i++) {
      wifiMulti.addAP(known_wifis[i][0], known_wifis[i][1]);
  }

  Serial.println("[Core 0] ƒêang qu√©t v√† k·∫øt n·ªëi WiFi...");
  while (wifiMulti.run() != WL_CONNECTED) {
      vTaskDelay(pdMS_TO_TICKS(1000)); // D√πng vTaskDelay thay cho delay()
      Serial.print(".");
  }
  Serial.println("\n[Core 0] K·∫æT N·ªêI WIFI TH√ÄNH C√îNG!");
  Serial.print("[Core 0] ƒê√£ k·∫øt n·ªëi t·ªõi m·∫°ng: ");
  Serial.println(WiFi.SSID());
  Serial.print("[Core 0] ƒê·ªãa ch·ªâ IP c·ªßa ESP32: ");
  Serial.println(WiFi.localIP());

  // =================================================================
  // --- KH·ªûI T·∫†O mDNS V√Ä T√åM SERVER ---
  // =================================================================
  Serial.println("\n[Core 0] ƒêang kh·ªüi t·∫°o mDNS...");
  if (!MDNS.begin("esp32-vector-eyes")) {
    Serial.println("[Core 0] L·ªói kh·ªüi t·∫°o mDNS!");
  } else {
    Serial.println("[Core 0] mDNS ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng!");
    
    // T√¨m server b·∫±ng mDNS
    Serial.printf("[Core 0] ƒêang t√¨m '%s.local' tr√™n m·∫°ng...\n", MDNS_HOSTNAME);
    
    // Th·ª≠ t√¨m server trong 10 gi√¢y
    int attempts = 0;
    while (!server_discovered && attempts < 20) {
      int n = MDNS.queryService("http", "tcp");
      if (n > 0) {
        Serial.printf("[Core 0] T√¨m th·∫•y %d d·ªãch v·ª• HTTP\n", n);
        
        for (int i = 0; i < n; ++i) {
          String hostname = MDNS.hostname(i);
          int port = MDNS.port(i);
          
          Serial.printf("[Core 0] D·ªãch v·ª• %d: %s (Port: %d)\n", i + 1, hostname.c_str(), port);
          
          // Ki·ªÉm tra xem c√≥ ph·∫£i server c·ªßa ch√∫ng ta kh√¥ng
          if (hostname.indexOf(MDNS_HOSTNAME) != -1) {
            // L·∫•y IP b·∫±ng c√°ch resolve hostname
            IPAddress ip = MDNS.queryHost(hostname, 1000);
            if (ip.toString() != "0.0.0.0") {
              discovered_server_ip = ip.toString();
              discovered_server_port = port;
              server_discovered = true;
              
              Serial.println("[Core 0] üéØ ƒê√É T√åM TH·∫§Y SERVER ROBOT!");
              Serial.printf("[Core 0] IP: %s, Port: %d\n", discovered_server_ip.c_str(), discovered_server_port);
              break;
            }
          }
        }
      }
      
      if (!server_discovered) {
        Serial.printf("[Core 0] L·∫ßn th·ª≠ %d/20: Kh√¥ng t√¨m th·∫•y server, th·ª≠ l·∫°i sau 500ms...\n", attempts + 1);
        vTaskDelay(pdMS_TO_TICKS(500));
        attempts++;
      }
    }
    
    if (!server_discovered) {
      Serial.println("[Core 0] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y server qua mDNS, s·ª≠ d·ª•ng IP c·ªë ƒë·ªãnh");
      discovered_server_ip = String(SERVER_IP);
      discovered_server_port = SERVER_PORT;
    }
  }

  // =================================================================
  // --- G·ª¨I REQUEST KI·ªÇM TRA ƒê·∫æN SERVER ---
  // =================================================================
  Serial.println("\n[Core 0] ƒêang th·ª≠ g·ª≠i request ki·ªÉm tra ƒë·∫øn server...");
  
  HTTPClient http;
  String serverUrl = "http://" + discovered_server_ip + ":" + String(discovered_server_port) + "/";
  
  http.begin(serverUrl);
  int httpCode = http.GET();

  if (httpCode > 0) {
    String payload = http.getString();
    Serial.printf("[Core 0] Server ƒë√£ ph·∫£n h·ªìi! M√£: %d\n", httpCode);
    Serial.println("[Core 0] N·ªôi dung ph·∫£n h·ªìi:");
    Serial.println(payload);
  } else {
    Serial.printf("[Core 0] L·ªói k·∫øt n·ªëi ƒë·∫øn server! M√£ l·ªói: %s\n", http.errorToString(httpCode).c_str());
  }
  http.end();
  // =================================================================
  // --- K·∫æT TH√öC PH·∫¶N TH√äM M·ªöI ---
  // =================================================================

  // --- B∆∞·ªõc 2: V√≤ng l·∫∑p ch√≠nh c·ªßa Core 0 ---
  // V√≤ng l·∫∑p n√†y s·∫Ω x·ª≠ l√Ω logic n·∫∑ng v√† giao ti·∫øp v·ªõi server
  unsigned long lastHeartbeat = 0;
  unsigned long lastEmotionCheck = 0;
  
  for (;;) {
    unsigned long currentTime = millis();
    
    // Ki·ªÉm tra v√† duy tr√¨ k·∫øt n·ªëi WiFi
    if (wifiMulti.run() != WL_CONNECTED) {
        Serial.println("[Core 0] M·∫•t k·∫øt n·ªëi WiFi! ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...");
        // wifiMulti.run() s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω vi·ªác k·∫øt n·ªëi l·∫°i
    } else {
        // =================================================================
        // --- G·ª¨I HEARTBEAT ƒê·ªäNH K·ª≤ (M·ªñI 5 GI√ÇY) ---
        // =================================================================
        if (currentTime - lastHeartbeat > 5000) {
            HTTPClient http;
            String heartbeatUrl = "http://" + discovered_server_ip + ":" + String(discovered_server_port) + "/api/heartbeat";
            
            http.begin(heartbeatUrl);
            http.addHeader("Content-Type", "application/json");
            
            // T·∫°o JSON payload cho heartbeat
            String jsonPayload = "{\"status\":\"alive\",\"free_heap\":" + String(esp_get_free_heap_size()) + "}";
            
            int httpCode = http.POST(jsonPayload);
            if (httpCode > 0) {
                Serial.printf("[Core 0] Heartbeat g·ª≠i th√†nh c√¥ng! M√£: %d\n", httpCode);
            } else {
                Serial.printf("[Core 0] L·ªói g·ª≠i heartbeat: %s\n", http.errorToString(httpCode).c_str());
            }
            http.end();
            
            lastHeartbeat = currentTime;
        }
        
        // =================================================================
        // --- KI·ªÇM TRA L·ªÜNH C·∫¢M X√öC (M·ªñI 2 GI√ÇY) ---
        // =================================================================
        if (currentTime - lastEmotionCheck > 2000) {
            HTTPClient http;
            String emotionUrl = "http://" + discovered_server_ip + ":" + String(discovered_server_port) + "/api/emotion/next";
            
            http.begin(emotionUrl);
            int httpCode = http.GET();
            
            if (httpCode == 200) {
                String payload = http.getString();
                Serial.println("[Core 0] Nh·∫≠n ƒë∆∞·ª£c l·ªánh c·∫£m x√∫c:");
                Serial.println(payload);
                
                // Parse JSON ƒë·ªÉ l·∫•y emotion
                if (payload.indexOf("\"emotion\"") != -1) {
                    // T√¨m emotion trong JSON
                    int startPos = payload.indexOf("\"emotion\":\"") + 11;
                    int endPos = payload.indexOf("\"", startPos);
                    if (startPos > 10 && endPos > startPos) {
                        String emotion = payload.substring(startPos, endPos);
                        Serial.printf("[Core 0] Th·ª±c hi·ªán c·∫£m x√∫c: %s\n", emotion.c_str());
                        
                        // Th·ª±c hi·ªán thay ƒë·ªïi c·∫£m x√∫c
                        const Emotion* target_emotion = find_emotion_by_name(emotion.c_str());
                        if (target_emotion != nullptr) {
                            // L·∫•y emotion hi·ªán t·∫°i (neutral l√†m m·∫∑c ƒë·ªãnh)
                            const Emotion* current_emotion = &emotions[NEUTRAL_STATE_INDEX];
                            
                            // Th·ª±c hi·ªán animation chuy·ªÉn ƒë·ªïi c·∫£m x√∫c
                            animation_engine_change_emotion(
                                current_emotion,    // T·ª´ c·∫£m x√∫c hi·ªán t·∫°i
                                target_emotion,     // ƒê·∫øn c·∫£m x√∫c m·ªõi
                                1.0f,               // Th·ªùi gian chuy·ªÉn ƒë·ªïi: 1 gi√¢y
                                1.0f,               // C∆∞·ªùng ƒë·ªô: 100%
                                EASE_IN_OUT_QUAD,   // Ki·ªÉu easing
                                3000                // Th·ªùi gian gi·ªØ c·∫£m x√∫c: 3 gi√¢y
                            );
                            
                            Serial.printf("[Core 0] ‚úÖ ƒê√£ th·ª±c hi·ªán c·∫£m x√∫c: %s\n", emotion.c_str());
                        } else {
                            Serial.printf("[Core 0] ‚ùå Kh√¥ng t√¨m th·∫•y c·∫£m x√∫c: %s\n", emotion.c_str());
                        }
                    }
                }
            } else if (httpCode == 404) {
                // Kh√¥ng c√≥ l·ªánh c·∫£m x√∫c m·ªõi
                // Serial.println("[Core 0] Kh√¥ng c√≥ l·ªánh c·∫£m x√∫c m·ªõi");
            } else {
                Serial.printf("[Core 0] L·ªói ki·ªÉm tra c·∫£m x√∫c: %s\n", http.errorToString(httpCode).c_str());
            }
            http.end();
            
            lastEmotionCheck = currentTime;
        }
    }

    // T·∫°m d·ª´ng task trong 100ms ƒë·ªÉ kh√¥ng chi·∫øm h·∫øt CPU c·ªßa Core 0
    vTaskDelay(pdMS_TO_TICKS(100)); 
  }
}


// =================================================================
// H√ÄM SETUP() - CH·∫†Y M·ªòT L·∫¶N KHI KH·ªûI ƒê·ªòNG
// =================================================================
void setup() {
    // Kh·ªüi t·∫°o giao ti·∫øp Serial ƒë·ªÉ debug
    Serial.begin(115200);
    
    // L·∫•y h·∫°t gi·ªëng ng·∫´u nhi√™n t·ª´ ph·∫ßn c·ª©ng
    randomSeed(esp_random());
    
    // Kh·ªüi t·∫°o m√†n h√¨nh OLED
    u8g2.begin();
    
    // Kh·ªüi t·∫°o c√°c module c·ªßa m·∫Øt robot
    animation_engine_initialize();
    initialize_directors();
    
    // --- T·∫†O TASK M·ªöI CHO CORE 0 ---
    xTaskCreatePinnedToCore(
        networkAndBrainTask,   // T√™n h√†m c·ªßa task
        "NetworkTask",         // T√™n m√¥ t·∫£
        10000,                 // K√≠ch th∆∞·ªõc Stack (c·∫ßn l·ªõn cho WiFi v√† sau n√†y l√† HTTP)
        NULL,                  // Kh√¥ng c√≥ tham s·ªë
        1,                     // M·ª©c ∆∞u ti√™n 1
        NULL,                  // Kh√¥ng c·∫ßn handle
        0);                    // Ch·∫°y tr√™n Core 0
        
    Serial.println("H√†m setup() ƒë√£ ho√†n t·∫•t tr√™n Core 1. Giao di·ªán m·∫Øt ƒëang ch·∫°y.");
}


// =================================================================
// H√ÄM LOOP() - CH·∫†Y L·∫∂P L·∫†I TR√äN CORE 1
// =================================================================
void loop() {
    // Core 1 b√¢y gi·ªù ch·ªâ t·∫≠p trung v√†o vi·ªác l√†m cho m·∫Øt ho·∫°t ƒë·ªông m∆∞·ª£t m√†.
    // To√†n b·ªô code v·ªÅ WiFi v√† micro ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang Core 0.

    // 1. "B·ªô n√£o Ch·ªõp m·∫Øt" quy·∫øt ƒë·ªãnh khi n√†o c·∫ßn ch·ªõp
    if (blink_director_update()) {
        animation_engine_start_blink();
    }
    
    // 2. "B·ªô n√£o C·∫£m x√∫c" quy·∫øt ƒë·ªãnh c·∫£m x√∫c ti·∫øp theo
    emotion_director_update();

    // 3. "B·ªô n√£o H∆∞·ªõng nh√¨n" quy·∫øt ƒë·ªãnh khi n√†o c·∫ßn li·∫øc m·∫Øt
    gaze_director_update();

    // 4. Engine lu√¥n c·∫≠p nh·∫≠t v√† v·∫Ω l·∫°i m·∫Øt l√™n m√†n h√¨nh
    animation_engine_update();

    // Kh√¥ng c√≥ delay, kh√¥ng c√≥ x·ª≠ l√Ω n·∫∑ng.
    // V√≤ng l·∫∑p n√†y ch·∫°y c·ª±c nhanh ƒë·ªÉ ƒë·∫£m b·∫£o animation kh√¥ng b·ªã gi·∫≠t.
}